mutate(filename = flnm)
}
viral_cluster <-
list.files(pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.))
viral_cluster <- separate(viral_cluster, col=filename, into=c("biome", "category"), sep="-(?=[^-])", extra = "merge")
viral_cluster <- separate(viral_cluster, col=biome, into=c("junk", "biome"), sep="(?=[A-z0-9])", extra = "merge")
viral_cluster <- separate(viral_cluster, col=category, into=c("junk", "category"), sep="(?=[0-9])", remove = FALSE)
viral_cluster <- separate(viral_cluster, col=category, into=c("category", "junk"), sep="[-]", extra = "merge")
viral_cluster$junk <- NULL
viral_cluster <- separate(viral_cluster, col=Members, into=c("Members_1", "Members_2"), sep="[,]", extra = "merge")
read_plus <- function(flnm) {
read_csv(flnm) %>%
mutate(filename = flnm)
}
viral_cluster <-
list.files(pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.))
viral_cluster <- separate(viral_cluster, col=Members, into=c("Members_1", "Members_2", "Members_3"), sep="[,]", extra = "merge")
read_plus <- function(flnm) {
read_csv(flnm) %>%
mutate(filename = flnm)
}
viral_cluster <-
list.files(pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.))
viral_cluster <- separate(viral_cluster, col=Members, into=c("Members_1", "Members_2", "Members_3", "Members_4", "Members_5"), sep="[,]", extra = "merge")
read_plus <- function(flnm) {
read_csv(flnm) %>%
mutate(filename = flnm)
}
viral_cluster <-
list.files(pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.))
viral_cluster <- separate(viral_cluster, col=Members, into=c("Members_1", "Members_2", "Members_3", "Members_4", "Members_5", "Members_6", "Members_7"), sep="[,]", extra = "merge")
read_plus <- function(flnm) {
read_csv(flnm) %>%
mutate(filename = flnm)
}
viral_cluster <-
list.files(pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.))
wd_genomes<-"~/Bernardo/ALL DATA 2020/Vcontact2/genome_by_genome/"
setwd(wd_genomes)
#Import of genome_by_genome.csv
read_plus <- function(flnm) {
read_csv(flnm) %>%
mutate(filename = flnm)
}
viral_genome <-
list.files(pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.))
View(viral_genome)
viral_genome <- separate(viral_genome, col=filename, into=c("biome", "category"), sep="-(?=[^-])", extra = "merge")
viral_genome <- separate(viral_genome, col=biome, into=c("junk", "biome"), sep="(?=[A-z0-9])", extra = "merge")
viral_genome <- separate(viral_genome, col=category, into=c("junk", "category"), sep="(?=[0-9])", remove = FALSE)
viral_genome <- separate(viral_genome, col=category, into=c("category", "junk"), sep="[-]", extra = "merge")
viral_genome$junk <- NULL
as.matrix(viral_genome)
viral_matrix<-as.matrix(viral_genome)
heatmap(viral_matrix)
viral_matrix <- transform(viral_matrix, count = ave(family, biome, FUN = length))
viral_matrix <- transform(viral_genome, count = ave(family, biome, FUN = length))
tabyl(viral_genome, biome, family) %>%
adorn_percentages("col") %>%
adorn_pct_formatting(digits = 1)
library(janitor)
install.packages("janitor")
library(janitor)
tabyl(viral_genome, biome, family) %>%
adorn_percentages("col") %>%
adorn_pct_formatting(digits = 1)
tabyl(viral_genome, biome, Family) %>%
adorn_percentages("col") %>%
adorn_pct_formatting(digits = 1)
library(vtree)
install.packages("vtree")
library(vtree)
vtree(viral_genome, c("biome", "Family"),
fillcolor = c( biome = "#e7d4e8", Family = "#99d8c9"),
horiz = FALSE)
vtree(viral_genome, c("biome", "Family"),
fillcolor = c( biome = "#e7d4e8", Family = "#99d8c9"),
horiz = TRUE)
vtree(viral_genome, c("biome", "Order"),
fillcolor = c( biome = "#e7d4e8", Order = "#99d8c9"),
horiz = FALSE)
library(ggplot2)
wd_genomes<-"~/Bernardo/ALL DATA 2020/Vcontact2/genome_by_genome/"
setwd(wd_genomes)
#Import of genome_by_genome.csv
read_plus <- function(flnm) {
read_csv(flnm) %>%
mutate(filename = flnm)
}
viral_genome <-
list.files(pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.))
#Cleaning...
viral_genome <- separate(viral_genome, col=filename, into=c("Biome", "Category"), sep="-(?=[^-])", extra = "merge")
viral_genome <- separate(viral_genome, col=biome, into=c("junk", "Biome"), sep="(?=[A-z0-9])", extra = "merge")
viral_genome <- separate(viral_genome, col=category, into=c("junk", "category"), sep="(?=[0-9])", remove = FALSE)
viral_genome <- separate(viral_genome, col=category, into=c("category", "junk"), sep="[-]", extra = "merge")
viral_genome$junk <- NULL
read_plus <- function(flnm) {
read_csv(flnm) %>%
mutate(filename = flnm)
}
viral_genome <-
list.files(pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.))
#Cleaning...
viral_genome <- separate(viral_genome, col=filename, into=c("Biome", "Category"), sep="-(?=[^-])", extra = "merge")
viral_genome <- separate(viral_genome, col=Biome, into=c("junk", "Biome"), sep="(?=[A-z0-9])", extra = "merge")
viral_genome <- separate(viral_genome, col=category, into=c("junk", "category"), sep="(?=[0-9])", remove = FALSE)
viral_genome <- separate(viral_genome, col=category, into=c("category", "junk"), sep="[-]", extra = "merge")
viral_genome$junk <- NULL
read_plus <- function(flnm) {
read_csv(flnm) %>%
mutate(filename = flnm)
}
viral_genome <-
list.files(pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.))
#Cleaning...
viral_genome <- separate(viral_genome, col=filename, into=c("Biome", "Category"), sep="-(?=[^-])", extra = "merge")
viral_genome <- separate(viral_genome, col=Biome, into=c("junk", "Biome"), sep="(?=[A-z0-9])", extra = "merge")
viral_genome <- separate(viral_genome, col=category, into=c("junk", "Category"), sep="(?=[0-9])", remove = FALSE)
viral_genome <- separate(viral_genome, col=category, into=c("Category", "junk"), sep="[-]", extra = "merge")
viral_genome$junk <- NULL
read_plus <- function(flnm) {
read_csv(flnm) %>%
mutate(filename = flnm)
}
viral_genome <-
list.files(pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.))
#Cleaning...
viral_genome <- separate(viral_genome, col=filename, into=c("Biome", "Category"), sep="-(?=[^-])", extra = "merge")
viral_genome <- separate(viral_genome, col=Biome, into=c("junk", "Biome"), sep="(?=[A-z0-9])", extra = "merge")
viral_genome <- separate(viral_genome, col=Category, into=c("junk", "Category"), sep="(?=[0-9])", remove = FALSE)
viral_genome <- separate(viral_genome, col=Category, into=c("Category", "junk"), sep="[-]", extra = "merge")
viral_genome$junk <- NULL
vtree(viral_genome, c("Biome", "Order"),
fillcolor = c( biome = "#e7d4e8", Order = "#99d8c9"),
horiz = FALSE)
vtree(viral_genome, c("Biome", "Order"),
fillcolor = c( Biome = "#e7d4e8", Order = "#99d8c9"),
horiz = FALSE)
ggplot(viral_genome, aes(Biome, fill = Family)) +
geom_bar(stat = "identity") +
facet_wrap(facets = vars(Order))
library(dplyr)
my_summary <- viral_genome %>%
count(Family, Biome, Order, sort = TRUE)
ggplot(viral_genome,Size aes(Biome, fill = Family)) +
geom_bar(stat = "identity") +
facet_wrap(facets = vars(Order))
library(CGPfunctions)
install.packages("CGPfunctions")
library(CGPfunctions)
#plotxtabs
PlotXTabs(viral_genome)
#plotxtabs
PlotXTabs(viral_genome, Biome, Genus)
#plotxtabs
PlotXTabs(viral_genome, Biome, Family)
#plotxtabs
PlotXTabs(viral_genome, Biome, Family, plottype = stack)
#plotxtabs
PlotXTabs(viral_genome, Biome, Family, plottype = "stack")
#plotxtabs
PlotXTabs(viral_genome, Biome, Family, plottype = "percent")
#plotxtabs
PlotXTabs(viral_genome, Biome, Family, plottype = "stack")
#plotxtabs
PlotXTabs(viral_genome, Biome, Family, plottype = "side")
#plotxtabs
PlotXTabs(viral_genome, Biome, Family, plottype = "mosaic")
count(viral_genome, vars = Genus, wt_var = Biome)
count(viral_genome, vars = Biome, wt_var = Genus)
viral_genome$count<-as.numeric(ave(viral_genome$Genus, viral_genome$Genus, Fun=length ))
df <- transform(viral_genome, count = ave(Genus, Biome, FUN = length))
View(df)
dat <- transform(viral_genome, count = table(Genus)[Genus])
View(dat)
library(otuSummary)
install.packages("otuSummary")
library(otuSummary)
unlist(lapply(split(dat, dat$Biome), function(Genus){Genus$count.Freq / sum(Genus$count.Freq)}))
dat$Rel.abun<-unlist(lapply(split(dat, dat$Biome), function(Genus){Genus$count.Freq / sum(Genus$count.Freq)}))
dat %>%
group_by(Biome) %>%
mutate(relAbundByBiome = count.Freq / sum(count.Freq))
dat<-dat %>%
group_by(Biome) %>%
mutate(relAbundByBiome = count.Freq / sum(count.Freq))
as.matrix(select(dat, Genus, Biome, relAbundByBiome))
matrix_viral<-as.matrix(select(dat, Genus, Biome, relAbundByBiome))
View(viral_matrix)
dat<-select(dat, Genus, Biome, relAbundByBiome)
View(dat)
matrix_viral<-as.matrix(dat)
heatmap(dat)
matrix_viral<-as.matrix(dat[, -1])
rownames(matrix_viral)<-dat$Genus
heatmap(dat)
matrix_viral<-as.matrix(dat[, -1 -2])
matrix_viral<-as.matrix(dat[, -1 -2])
rownames(matrix_viral)<-dat$Genus
colnames(matrix_viral)<-dat$Biome
heatmap(dat)
View(matrix_viral)
matrix_viral<-as.matrix(dat$relAbundByBiome)
rownames(matrix_viral)<-dat$Genus
colnames(matrix_viral)<-dat$Biome
heatmap(dat)
heatmap(matrix_viral)
install_github("jokergoo/ComplexHeatmap")
library(devtools)
install_github("jokergoo/ComplexHeatmap")
Heatmap(matrix_viral)
libary(ComplexHeatmap)
library(ComplexHeatmap)
library(ComplexHeatmap)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
Heatmap(matrix_viral)
ht<-Heatmap(matrix_viral)
draw(ht)
dat<-select(dat, Genus, Biome, relAbundByBiome)
datmatrix<-as.matrix(dat)
ht<-Heatmap(datmatrix)
draw(ht)
View(datmatrix)
dat<-select(dat, Family, Biome, relAbundByBiome)
dat<-dat %>%
group_by(Biome) %>%
mutate(relAbundByBiome = count.Freq / sum(count.Freq))
viral_genome$count<-as.numeric(ave(viral_genome$Genus, viral_genome$Genus, Fun=length ))
dat <- transform(viral_genome, count = table(Genus)[Genus])
dat<-dat %>%
group_by(Biome) %>%
mutate(relAbundByBiome = count.Freq / sum(count.Freq))
dat<-select(viral_genome, Family, Biome, relAbundByBiome)
dat<-dat %>%
group_by(Biome) %>%
mutate(relAbundByBiome = count.Freq / sum(count.Freq))
dat<-select(viral_genome, Family, Biome, relAbundByBiome)
View(dat)
dat<-select(dat, Family, Biome, relAbundByBiome)
datmatrix<-as.matrix(dat)
ht<-Heatmap(datmatrix)
draw(ht)
datmatrix<-as.matrix(dat[,-1-2])
View(datmatrix)
datmatrix<-as.matrix(dat[,"relAbundByBiome"])
View(datmatrix)
row_labels=structure(dat$Family)
column_labels=structure(dat$Biome)
ht<-Heatmap(datmatrix, name="heat_map", row_labels=row_labels[rownames(heat_map)], column_labels=column_labels[colnames(heat_map)])
row_labels=structure(names=dat$Family)
row_labels=as.vector(dat['Genus'])
row_labels=as.vector(dat['Family'])
column_labels=as.vector(dat['Biome'])
ht<-Heatmap(datmatrix, name="heat_map", row_labels=row_labels[rownames(heat_map)], column_labels=column_labels[colnames(heat_map)])
ht<-Heatmap(datmatrix, name="heat_map", row_labels=row_labels[rownames(datmatrix)], column_labels=column_labels[colnames(datmatrix)])
ht<-Heatmap(datmatrix, name="heat_map", row_labels=row_labels, column_labels=column_labels[colnames(datmatrix)])
View(datmatrix)
View(row_labels)
ht<-Heatmap(datmatrix, name="heat_map", row_labels=[rownames(datmatrix)], column_labels=column_labels[colnames(datmatrix)])
alphaDiversity(viral_genome, siteInCol = FALSE, taxhead = Genus, threshold = 1,
percent = TRUE)
alphaDiversity(viral_genome, siteInCol = FALSE, taxhead = "Genus", threshold = 1,
percent = TRUE)
wd_dram<-"~/Bernardo/ALL DATA 2020/DRAMv/annotations/"
setwd(wd_dram)
read_plus <- function(flnm) {
read_tsv(flnm) %>%
mutate(filename = flnm)
}
DRAMv_with_sources <-
list.files(pattern = "*.tsv",
full.names = T) %>%
map_df(~read_plus(.))
DRAMv_with_sources <- separate(DRAMv_with_sources, col=filename, into=c("biome", "junk"), sep="_(?=[^_]+$)", extra = "merge")
DRAMv_with_sources <- separate(DRAMv_with_sources, col=biome, into=c("junk2", "biome"), sep="(?=[A-z0-9])", extra = "merge")
DRAMv_with_sources$junk <- NULL
DRAMv_with_sources$junk2 <- NULL
pre_vcontact2 <- select(DRAMv_with_sources, fasta, viral_id, viral_hit, biome)%>%
separate(col=viral_hit, into=c("viral_function", "protein_and_vname"), sep="\\s", extra="merge")%>%
separate(col=protein_and_vname, into=c("viral_function", "viral_tax"), sep="(?=\\[)") #separates the column by the fist  "["
View(pre_vcontact2)
ggplot(prevcontact2, aes(viral_tax, fill = biome)) +
geom_bar(stat = "identity") +
facet_wrap(facets = vars(viral_function))
ggplot(prev_contact2, aes(viral_tax, fill = biome)) +
geom_bar(stat = "identity") +
facet_wrap(facets = vars(viral_function))
pre_vcontact2 <- select(DRAMv_with_sources, fasta, viral_id, viral_hit, biome)%>%
separate(col=viral_hit, into=c("viral_function", "protein_and_vname"), sep="\\s", extra="merge")%>%
separate(col=protein_and_vname, into=c("viral_function", "viral_tax"), sep="(?=\\[)") #separates the column by the fist  "["
ggplot(prev_contact2, aes(viral_tax, fill = biome)) +
geom_bar(stat = "identity") +
facet_wrap(facets = vars(viral_function))
ggplot(pre_vcontact2, aes(viral_tax, fill = biome)) +
geom_bar(stat = "identity") +
facet_wrap(facets = vars(viral_function))
ggplot(pre_vcontact2, aes(viral_function, viral_tax)) +
geom_bar(stat = "identity") +
facet_wrap(facets = vars(biome))
ggplot(pre_vcontact2, aes(viral_tax, viral_function)) +
geom_bar(stat = "identity") +
facet_wrap(facets = vars(biome))
ggplot(pre_vcontact2, aes(viral_tax, viral_function, fill=biome)) +
geom_bar(stat = "identity")
ggplot(pre_vcontact2, aes(viral_tax, viral_function, colour=biome)) +
geom_point
ggplot(pre_vcontact2, aes(viral_tax, viral_function, colour=biome)) +
geom_point()
ggplot(pre_vcontact2, aes(viral_tax, biome, colour=viral_function)) +
geom_point()
View(viral_genome)
#vtree
vtree(viral_genome, c("Biome", "Order"),
fillcolor = c( Biome = "#e7d4e8", Order = "#99d8c9"),
horiz = FALSE)
#vtree
vtree(viral_genome, c("Biome", "Family"),
fillcolor = c( Biome = "#e7d4e8", Family = "#99d8c9"),
horiz = FALSE)
vtree(viral_genome, c("Biome", "Family"),
fillcolor = c( Biome = "#e7d4e8", Family = "#99d8c9"),
horiz = FALSE)
library(vtree)
#vtree
vtree(viral_genome, c("Biome", "Family"),
fillcolor = c( Biome = "#e7d4e8", Family = "#99d8c9"),
horiz = FALSE)
vtree(viral_genome, c("Biome", "Order"),
fillcolor = c( Biome = "#e7d4e8", Order = "#99d8c9"),
horiz = FALSE)
View(df)
sum(dat$relAbundByBiome)
dat$Rel.abun<-unlist(lapply(split(dat, dat$Biome), function(Genus){Genus$count.Freq / sum(Genus$count.Freq)}))
which(dat$Biome=="14_233")
which(dat$Biome=="14_233"& dat$Family=="Myoviridae")
###
Myo<- which(dat$Biome=="14_233"& dat$Family=="Myoviridae")
sum(dat[Myo,3])
unique(dat$Family)
ht<-Heatmap(datmatrix, name="heat_map", row_labels=row_labels[rownames(datmatrix)], column_labels=column_labels[colnames(datmatrix)])
library(ComplexHeatmap)
ht<-Heatmap(datmatrix, name="heat_map", row_labels=row_labels[rownames(datmatrix)], column_labels=column_labels[colnames(datmatrix)])
draw(ht)
View(row_labels)
vector_biomas<-(unique(dat$Biome)
vector_biomas<-unique(dat$Biome)
vector_biomas<-unique(dat$Biome)
vector_biomas
vector_family<-unique(dat$Family)
vector_family
for (i in 1:lenght(vector_biomas)){
bioma<-vector_biomas[i]
print(i)
print(bioma)
}
for (i in 1:length(vector_biomas)){
bioma<-vector_biomas[i]
print(i)
print(bioma)
}
bioma
temp<-which(dat$Biome==bioma)
temp
for (i in 1:length(vector_biomas)){
dat[c(1,10000) ,  ]
}
dat[c(1,10000) ,  ]
dat[temp, ]
subset<-dat[temp,]
View(subset)
vector_family
j<-16
familia<-vector_family[j]
View(subset)
temp2<-which(subset$Family==familia)
mini_subset<-subset[temp2,]
View(mini_subset)
sum(mini_subset$relAbundByBiome)
family_matrix<-matrix(data=NA, nrow=lenght(vector_family), ncol=lenght(vector_biomas))
lenght<-length
family_matrix<-matrix(data=NA, nrow=length(vector_family), ncol=length(vector_biomas))
View(family_matrix)
abundance_matrix<-matrix(data=NA, nrow=length(vector_family), ncol=length(vector_biomas))
colnames(abundance_matrix)<-vector_biomas
rownames(abundance_matrix)<-vector_family
View(abundance_matrix)
v<-c(1,2,3)
print(v)
v[1,2,4]
v<-c('banana', 'maça', 'uva')
v
v[3]
v[3='pera']
v[3]<-'pera'
v
for (i in 1:length(vector_biomas)){
bioma<-vector_biomas[i]
temp<-which(dat$Biome==bioma)
subset<-dat[temp,]
for (j in 1:length(vector_family)){
familia<-vector_family[j]
temp2<-which(subset$Family==familia)
mini_subset<-subset[temp2,]
soma_abun<-sum(mini_subset$relAbundByBiome)
abundance_matrix[j,i]<-soma_abun
}
}
sum(abundance_matrix[ ,3])
Heatmap(abundance_matrix)
prcomp(abundance_matrix)
pca<-prcomp(abundance_matrix)
plot(pca)
draw(pca)
heatmap(abundance_matrix)
pca<-prcomp(abundance_matrix, center = TRUE,scale. = TRUE)
plot(pca)
summary(pca)
install_github("vqv/ggbiplot")
library(devtools)
library(devtools)
install_github("vqv/ggbiplot")
install.packages("ggbiplot")
library("ggbiplot")
library(ggbiplot)
ggbiplot(pca)
ggbiplot(pca, labels=colnames(abundance_matrix))
ggbiplot(pca, labels=rownames(abundance_matrix))
pca<-prcomp(t(abundance_matrix), center = TRUE,scale. = TRUE)
ggbiplot(pca)
View(t(abundance_matrix))
install.packages(ggfortify)
install.packages('ggfortify')
library(ggfortify)
pca<-prcomp(abundance_matrix, center = TRUE,scale. = TRUE)
autoplot(pca)
autoplot(pca, label=TRUE, colour=TRUE)
autoplot(pca, label=TRUE, colour='Species')
autoplot(pca, label=TRUE, colour="Species")
autoplot(pca, label=TRUE)
pca<-prcomp(t(abundance_matrix), center = TRUE,scale. = TRUE)
autoplot(pca, label=TRUE)
autoplot(pca, label=TRUE, colour='Biome')
pca
autoplot(pca, label=TRUE, colour=c('red','blue'))
autoplot(pca, label=TRUE, colour='DESCRIPTION')
install.packages(cluster)
install.packages('cluster')
library(cluster)
autoplot(pam(pca[-5], 3), frame = TRUE, frame.type = 'norm')
library(cluster)
autoplot(pam(pca[-5], 3), frame = TRUE, frame.type = 'norm')
autoplot(pca, label=TRUE, colour='DESCRIPTION')
library(ggbiplot)
library(ggfortify)
library(cluster)
autoplot(pam(pca[-5], 3), frame = TRUE, frame.type = 'norm')
autoplot(pam(pca), frame = TRUE, frame.type = 'norm')
pca<-prcomp(t(abundance_matrix), center = TRUE,scale. = TRUE)
autoplot(pca, label=TRUE, colour='DESCRIPTION')
autoplot(pam(pca), frame = TRUE, frame.type = 'norm')
pca<-prcomp((abundance_matrix), center = TRUE,scale. = TRUE)
autoplot(pam(pca), frame = TRUE, frame.type = 'norm')
library(MetaViral)
conc_tsv <- function(path){
'%>%' <- tidyr::`%>%`
wd_dram<-path
setwd(wd_dram)
export_tsv <-
list.files(pattern = "*.tsv",
full.names = T) %>%
purrr::map_df(~list_tsv(.))
return(export_tsv)
}
load("C:/Users/bbica/Desktop/Scripts R/workplace1.RData")
x<-conc_tsv("~/Bernardo/ALL DATA 2020/DRAMv/annotations/")
list_tsv <- function(flnm) {
'%>%' <- tidyr::`%>%`
return_namefile <-
readr::read_tsv(flnm) %>%
dplyr::mutate(filename = flnm)
return(return_namefile)
}
library(Metaviral)
library(MetaViral)
library(MetaViral)
library(MetaViral)
x<-conc_tsv("~/Bernardo/ALL DATA 2020/DRAMv/annotations/")
View(x)
